<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Form\FormState;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_element_info_alter().
 */
function finnishcourses_base_element_info_alter(array &$types) {
  $types['datetime']['#process'][] = 'finnishcourses_base_datetime_set_format';
}

/**
 * Element process callback for datetime fields.
 */
function finnishcourses_base_datetime_set_format($element) {
  // Remove seconds in browsers that support HTML5 type=date.
  $element['time']['#attributes']['step'] = 60;
  return $element;
}

/**
 * Implements hook_form_alter().
 */
function finnishcourses_base_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_course_form') {
    $form['langcode']['widget'][0]['value']['#options'] = [
      'en' => t('English'),
    ];
    //kint($form);
  }

  if (in_array($form_id, ['node_course_form', 'node_course_edit_form'])) {

    //kint($form);
    if (empty($form['field_course_organization']['widget']['#options'])) {
      drupal_set_message(t('You do not have access to any organization or there are no organizations added in the system. Please contact
        your system administrator'), 'warning');
      //drupal_set_message(t('You have commented @maxcomment times, please edit or delete some of your older comments', ['@maxcomment' => $limitUser]));
    }

     // Set ajax callback function when organization field value changed
    // refreshLocationOptions callback loads street address and town options for selected organization
    $form['field_course_organization']['widget']['#ajax'] = [
      'callback' => 'refreshLocationOptions',
      'event' => 'change',
      'wrapper' => ['street-select', 'town-select'],
      'progress' => [
        'type' => 'throbber',
        'message' => NULL,
      ],
    ];

    //$form['field_course_street_address']['#attributes']['id'][] = 'street-select';
    $form['field_course_street_address']['#prefix'] = '<div id="street-select">';
    $form['field_course_street_address']['widget']['#options'] = getAddressOptions($form_state);
    $form['field_course_street_address']['#suffix'] = '</div>';

    //$form['field_course_town']['#attributes']['id'][] = 'town-select';
    $form['field_course_town']['#prefix'] = '<div id="town-select">';
    $form['field_course_town']['widget']['#options'] = getTownOptions($form_state);
    $form['field_course_town']['#suffix'] = '</div>';


    // foreach (array_keys($form['actions']) as $action) {
    //   if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
    //     $form['actions'][$action]['#submit'][] = 'finnishcourse_course_form_submit';
    //   }
    // }
  }

  if ($form_id == 'user_register_form') {
    if (isset($form['account']) && isset($form['account']['name'])) {
      $form['account']['mail']['#required'] = TRUE;
      //$form['account']['name']['#access'] = FALSE; 
    }
  }
}

function getAddressOptions($form_state) {

  if (!is_object($form_state) || !method_exists($form_state, 'getTriggeringElement')) {
    return [];
  }

  $element = $form_state->getTriggeringElement();

  if (empty($element['#value'])) {
    return [];
  }

  $organization = $element['#value'];

  $addressOptions = getOptionsFromTerm($organization, 'field_locations_addresses');

  return $addressOptions;
}

function getTownOptions($form_state) {

  if (!is_object($form_state) || !method_exists($form_state, 'getTriggeringElement')) {
    return [];
  }

  $element = $form_state->getTriggeringElement();

  if (empty($element['#value'])) {
    return [];
  }

  $organization = $element['#value'];

  $townOptions = getOptionsFromTerm($organization, 'field_locations_towns');

  return $townOptions;
}

function getOptionsFromTerm($tid = '', $field = '') {
  $term = Term::load($tid);

  if (!$term) {
    return FALSE;
  }

  $values = $term->get($field)->getValue();

  if (empty($values)) {
    return FALSE;
  }
  $options = [];

  foreach ($values as $key => $value) {
    $locationTerm = Term::load($value['target_id']);
    $options[$value['target_id']] = $locationTerm->label();
  }

  return $options;
}

function refreshLocationOptions(array $form, FormStateInterface &$form_state) {

  $element = $form_state->getTriggeringElement();
  //ddl($element['#value']);
  //ddl($form_state);
  $response = new AjaxResponse();
  $response->addCommand(new ReplaceCommand("#street-select", ($form['field_course_street_address'])));
  $response->addCommand(new ReplaceCommand("#town-select", ($form['field_course_town'])));
  return $response;
}

function finnishcourse_course_form_submit(array $form, FormStateInterface $form_state) {

}

function finnishcourses_base_node_presave(Drupal\Core\Entity\EntityInterface $entity) {
  
  // Generate course id
  if (empty($entity->get('field_course_id')->getValue())) {
    $year = date('y');
    if (empty(\Drupal::state()->get('courseNumber'))) {
      $courseNumber = 1;
    } else {
      $courseNumber = \Drupal::state()->get('courseNumber') + 1;
    }

    \Drupal::state()->set('courseNumber', $courseNumber);
    // Use number_pad function to get 4 digit number
    $courseID = 'FI' . $year . number_pad($courseNumber, 4);
    $entity->set('field_course_id', $courseID);
  }
}

function number_pad($number,$n) {
  return str_pad((int) $number,$n,'0',STR_PAD_LEFT);
}

/**
 * Implements hook_page_attachments().
 */
function finnishcourses_base_page_attachments(array &$page) {
  // Attach admin-ui library for admin pages
  if(\Drupal::service('router.admin_context')->isAdminRoute()) {
    $page['#attached']['library'][] = 'finnishcourses_base/admin-ui';
  }
}

/**
 * Implements hook_theme_suggestions_taxonomy_term_alter().
 */
function finnishcourses_base_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  /** @var \Drupal\taxonomy\TermInterface $term */
  $term = $variables['elements']['#taxonomy_term'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  // Add view mode theme suggestions.
  $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->id() . '__' . $sanitized_view_mode;
}
