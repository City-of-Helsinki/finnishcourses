<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Form\FormState;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_element_info_alter().
 */
function finnishcourses_base_element_info_alter(array &$types) {
  $types['datetime']['#process'][] = 'finnishcourses_base_datetime_set_format';
}

/**
 * Element process callback for datetime fields.
 */
function finnishcourses_base_datetime_set_format($element) {
  // Remove seconds in browsers that support HTML5 type=date.
  $element['time']['#attributes']['step'] = 60;
  return $element;
}

/**
 * Implements hook_form_alter().
 */
function finnishcourses_base_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_course_form') {
    $form['langcode']['widget'][0]['value']['#options'] = [
      'en' => t('English'),
    ];
    //kint($form);
  }

  if (in_array($form_id, ['node_course_form', 'node_course_edit_form'])) {

     // Set ajax callback function when organization field value changed
    // refreshLocationOptions callback loads street address and town options for selected organization
    $form['field_course_organization']['widget']['#ajax'] = [
      'callback' => 'refreshLocationOptions',
      'event' => 'change',
      'wrapper' => ['street-select', 'town-select'],
      'progress' => [
        'type' => 'throbber',
        'message' => NULL,
      ],
    ];

    $addressOptions = getAddressOptions($form_state, $form);
    if (!empty($form['field_course_street_address']['widget']['#default_value'])) {
      $addressDefault = $form['field_course_street_address']['widget']['#default_value'];
    } else {
      $addressDefault = array_keys($addressOptions)[0];
    }

    $townOptions = getTownOptions($form_state, $form);
    if (!empty($form['field_course_town']['widget']['#default_value'])) {
      $townDefault = $form['field_course_town']['widget']['#default_value'];
    } else {
      $townDefault = array_keys($townOptions)[0];
    }

    //ddl($addressDefault);
    //$form['field_course_street_address']['#attributes']['id'][] = 'street-select';
    $form['field_course_street_address']['#prefix'] = '<div id="street-select">';
    $form['field_course_street_address']['widget']['#options'] = $addressOptions;
    $form['field_course_street_address']['widget']['#default_value'] = $addressDefault;
    $form['field_course_street_address']['#suffix'] = '</div>';

    //$form['field_course_town']['#attributes']['id'][] = 'town-select';
    $form['field_course_town']['#prefix'] = '<div id="town-select">';
    $form['field_course_town']['widget']['#options'] = $townOptions;
    $form['field_course_town']['widget']['#default_value'] = $townDefault;
    $form['field_course_town']['#suffix'] = '</div>';

    // Disable course id field because it will be generated automatically
    $form['field_course_id']['#disabled'] = 'disabled';
    $form['field_course_times_of_day']['#disabled'] = 'disabled';
    


    // foreach (array_keys($form['actions']) as $action) {
    //   if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
    //     $form['actions'][$action]['#submit'][] = 'finnishcourse_course_form_submit';
    //   }
    // }
  }

  if ($form_id == 'user_register_form') {
    if (isset($form['account']) && isset($form['account']['name'])) {
      $form['account']['mail']['#required'] = TRUE;
      //$form['account']['name']['#access'] = FALSE; 
    }
  }
}

function getAddressOptions($form_state, $form) {

  $organization = FALSE;

  if (is_object($form_state) && method_exists($form_state, 'getTriggeringElement') && !empty($form_state->getTriggeringElement())) {
    
    $element = $form_state->getTriggeringElement();
    if ($element['#name'] == 'field_course_organization') {


      if (!empty($element['#value'])) {
      
        $organization = $element['#value'];
      }
    }
  } else if (isset($form['field_course_organization']) && !empty($form['field_course_organization']['widget']['#default_value'])) {
    $organization = $form['field_course_organization']['widget']['#default_value'];
  }

  if (!$organization) {
    return;
  }

  $addressOptions = getOptionsFromTerm($organization, 'field_locations_addresses');

  return $addressOptions;
}

function getAddressDefault($form_state, $form) {

  $organization = FALSE;
  if (is_object($form_state) && method_exists($form_state, 'getTriggeringElement') && !empty($form_state->getTriggeringElement())) {
    
    $element = $form_state->getTriggeringElement();
    if ($element['#name'] == 'field_course_organization') {


      if (!empty($element['#value'])) {
      
        $organization = $element['#value'];
      }
    }
  } else if (isset($form['field_course_organization']) && !empty($form['field_course_organization']['widget']['#default_value'])) {
    $organization = $form['field_course_organization']['widget']['#default_value'];
  }

  if (!$organization) {
    return;
  }

  $addressDefault = getDefaultFromTerm($organization, 'field_locations_addresses');

  return $addressDefault;
}

function getTownOptions($form_state, $form) {

  $organization = FALSE;

  if (is_object($form_state) && method_exists($form_state, 'getTriggeringElement') && !empty($form_state->getTriggeringElement())) {
    
    $element = $form_state->getTriggeringElement();
    if ($element['#name'] == 'field_course_organization') {


      if (!empty($element['#value'])) {
      
        $organization = $element['#value'];
      }
    }
  } else if (isset($form['field_course_organization']) && !empty($form['field_course_organization']['widget']['#default_value'])) {
    $organization = $form['field_course_organization']['widget']['#default_value'];
  }

  if (!$organization) {
    return;
  }

  $townOptions = getOptionsFromTerm($organization, 'field_locations_towns');

  return $townOptions;
}

function getTownDefault($form_state, $form) {

  $organization = FALSE;

  if (is_object($form_state) && method_exists($form_state, 'getTriggeringElement') && !empty($form_state->getTriggeringElement())) {
    
    $element = $form_state->getTriggeringElement();
    if ($element['#name'] == 'field_course_organization') {


      if (!empty($element['#value'])) {
      
        $organization = $element['#value'];
      }
    }
  } else if (isset($form['field_course_organization']) && !empty($form['field_course_organization']['widget']['#default_value'])) {
    $organization = $form['field_course_organization']['widget']['#default_value'];
  }

  if (!$organization) {
    return;
  }

  $townDefault = getDefaultFromTerm($organization, 'field_locations_towns');

  return $townDefault;
}

function getOptionsFromTerm($tid = '', $field = '') {
  $term = Term::load($tid);

  if (!$term) {
    return FALSE;
  }

  $values = $term->get($field)->getValue();

  if (empty($values)) {
    return FALSE;
  }
  $options = [];

  foreach ($values as $key => $value) {
    $locationTerm = Term::load($value['target_id']);
    if (!$locationTerm) {
      continue;
    }
    $optionKey = $locationTerm->label() . ' ('.$value['target_id'].')';
    $options[$optionKey] = $locationTerm->label();
  }

  return $options;
}

function getDefaultFromTerm($tid = '', $field = '') {
  $term = Term::load($tid);

  if (!$term) {
    return FALSE;
  }

  $values = $term->get($field)->getValue();

  if (empty($values)) {
    return FALSE;
  }
  $options = [];

  // Get only first value
  $locationTerm = Term::load($values[0]['target_id']);
  $defaultKey = $locationTerm->label() . ' ('.$values[0]['target_id'].')';
  

  return $defaultKey;
}

function refreshLocationOptions(array $form, FormStateInterface &$form_state) {

  $element = $form_state->getTriggeringElement();
  //ddl($element['#value']);
  //ddl($form_state);
  $response = new AjaxResponse();
  $response->addCommand(new ReplaceCommand("#street-select", ($form['field_course_street_address'])));
  $response->addCommand(new ReplaceCommand("#town-select", ($form['field_course_town'])));
  return $response;
}

// function finnishcourse_course_form_submit(array $form, FormStateInterface $form_state) {
//   kint($form);
//   kint($form_state);
// }

function finnishcourses_base_node_presave(Drupal\Core\Entity\EntityInterface $entity) {
  
  // Generate course id
  if (is_object($entity) && method_exists($entity, 'bundle') && $entity->bundle() == 'course') {
    if (empty($entity->get('field_course_id')->getValue())) {
      $year = date('y');
      if (empty(\Drupal::state()->get('courseNumber'))) {
        $courseNumber = 1;
      } else {
        $courseNumber = \Drupal::state()->get('courseNumber') + 1;
      }

      \Drupal::state()->set('courseNumber', $courseNumber);
      // Use number_pad function to get 4 digit number
      $courseID = 'FI' . $year . number_pad($courseNumber, 4);
      $entity->set('field_course_id', $courseID);
    }

    $organizationId = $entity->get('field_course_organization')->target_id;
    $organization = Term::load($organizationId);

    if (!empty($entity->get('field_course_street_address')->getValue())) {
      $addressTid = $entity->get('field_course_street_address')->target_id;

      $addressIs = FALSE;

      if (!empty($organization->get('field_locations_addresses')->getValue())) {
        $organizationAddresses = $organization->get('field_locations_addresses')->getValue();

        foreach ($organizationAddresses as $key => $value) {
          if ($value['target_id'] == $addressTid) {

            $addressIs = TRUE;
            break;
          }
        }
      }
      if ($addressIs === FALSE) {
        $organization->field_locations_addresses[] = ['target_id' => $addressTid];
        $saveOrganization = TRUE;
      }      

    }
    if (!empty($entity->get('field_course_town')->getValue())) {
      $townTid = $entity->get('field_course_town')->target_id;
      $townIs = FALSE;
      if (!empty($organization->get('field_locations_towns')->getValue())) {

        $organizationTowns = $organization->get('field_locations_towns')->getValue();

        foreach ($organizationTowns as $key => $value) {
          if ($value['target_id'] == $townTid) {
            $townIs = TRUE;
            break;
          }
        }
      }
      if ($townIs === FALSE) {
        $organization->field_locations_towns[] = ['target_id' => $townTid];
        $saveOrganization = TRUE;
      }      

    }
    if ($saveOrganization) {
      $organization->save();
    }

    if (!empty($entity->get('field_course_week_hours')->getValue())) {
      $datesHours = $entity->get('field_course_week_hours')->getValue();
      $timesOfDays = [];
      foreach ($datesHours as $key => $dateHours) {
        if ($dateHours['starthours'] < '1200') {
          if (!in_array('beforenoon', $timesOfDays)) {
            $timesOfDays[] = 'beforenoon';
          }
        } else if ($dateHours['starthours'] >= '1200' && $dateHours['starthours'] < '1600') {
          if (!in_array('afternoon', $timesOfDays)) {
            $timesOfDays[] = 'afternoon';
          }
        } else if ($dateHours['starthours'] >= '1600') {
          if (!in_array('evening', $timesOfDays)) {
            $timesOfDays[] = 'evening';
          }
        }

      }
      if (!empty($timesOfDays)) {
        $entity->set('field_course_times_of_day', $timesOfDays);
      }
    }

    // Add course translations if they not exist yet
    if (!$entity->hasTranslation('fi')) {
      $entity->addTranslation('fi', $entity->toArray());
    }
    if (!$entity->hasTranslation('ru')) {
      $entity->addTranslation('ru', $entity->toArray());
    }
    

  }
}


function number_pad($number,$n) {
  return str_pad((int) $number,$n,'0',STR_PAD_LEFT);
}

/**
 * Implements hook_page_attachments().
 */
function finnishcourses_base_page_attachments(array &$page) {
  // Attach admin-ui library for admin pages
  if(\Drupal::service('router.admin_context')->isAdminRoute()) {
    $page['#attached']['library'][] = 'finnishcourses_base/admin-ui';
  }
}

/**
 * Implements hook_theme_suggestions_taxonomy_term_alter().
 */
function finnishcourses_base_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  /** @var \Drupal\taxonomy\TermInterface $term */
  $term = $variables['elements']['#taxonomy_term'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  // Add view mode theme suggestions.
  $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->id() . '__' . $sanitized_view_mode;
}

function finnishcourses_base_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $view = $form_state->get('view');

  if($view->id() == 'search_courses') {

    $form['more_options_trigger'] = [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#value' => t('More search options'),
      '#attributes' => ['class' => ['more-search-options-trigger']],
    ];

    $form['more_options'] = [
      '#type' => 'container',
      '#attributes' => ['id' => 'more-options-wrapper', 'class' => ['more-options-wrapper']],
    ];

    $form['more_options']['course_fee'] = $form['course_fee'];
    $form['more_options']['time_of_day'] = $form['time_of_day'];
    $form['more_options']['starting_level_ext'] = $form['starting_level_ext'];
    $form['more_options']['start_date'] = $form['start_date'];
    $form['more_options']['start_date_2'] = $form['start_date_2'];
    $form['more_options']['keyword'] = $form['keyword'];

    $form['more_options']['time_of_day']['#title'] = t('Time of day');
    $form['more_options']['starting_level_ext']['#title'] = t('Starting level');
    $form['more_options']['start_date']['#title'] = t('Course starts');
    $form['more_options']['keyword']['#title'] = t('Keyword');

    unset($form['course_fee']);
    unset($form['time_of_day']);
    unset($form['starting_level_ext']);
    unset($form['start_date']);
    unset($form['start_date_2']);
    unset($form['keyword']);

  }
}  

function finnishcourses_base_preprocess_field(&$variables) {

}

function finnishcourses_base_preprocess_office_hours(&$variables) {
  
  if (!empty($variables['items'])) {
    foreach ($variables['items'] as $key => $item) {
      if (isset($item['slots']) && isset($item['slots']['#type']) && $item['slots']['#type'] == 'markup') {
        if (is_string($item['slots']['#markup'])) {
          $variables['items'][$key]['classes'] = 'office-hours__item';
        } else {
          $variables['items'][$key]['classes'] = 'office-hours__item empty';
        }
      }
    }
  }
}
